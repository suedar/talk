{"version":3,"sources":["assets/before.svg","assets/after.svg","pages/index.js","App.js","reportWebVitals.js","index.js"],"names":["newRecognition","window","webkitSpeechRecognition","useState","talkList","setTalkList","isListening","setIsListening","continuous","onresult","event","a","console","log","results","transcript","result","t","fetch","headers","res","json","reply","content","utterThis","SpeechSynthesisUtterance","speechSynthesis","speak","useEffect","onkeydown","e","code","stop","start","onkeyup","className","map","item","src","afterImg","beforeImg","alt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAAe,MAA0B,mCCA1B,MAA0B,kC,eCQ1B,aACb,IAAMA,EAAiB,IAAIC,OAAOC,wBAClC,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAsCA,OArCAP,EAAeQ,YAAa,EAE5BR,EAAeS,SAAf,uCAA0B,WAAgBC,GAAhB,uBAAAC,EAAA,6DACxBC,QAAQC,IAAIH,EAAMI,QAAQ,GAAG,GAAGC,WAAY,YACtCC,EAASN,EAAMI,QAAQ,GAAG,GAAGC,WACnCV,GAAY,SAACY,GAAD,4BAAWA,GAAX,CAAcD,OAHF,SAINE,MAAM,6BAAD,OACQF,GAC7B,CACEG,SAAO,GACL,8BAA+B,WAD1B,4CAE0B,oBAF1B,uBAGG,qBAHH,KAPa,cAIlBC,EAJkB,gBAcHA,EAAIC,OAdD,OAclBC,EAdkB,OAcSC,QAC3BC,EAAY,IAAIvB,OAAOwB,yBAAyBH,GACtDrB,OAAOyB,gBAAgBC,MAAMH,GAC7BnB,GAAY,SAACY,GAAD,4BAAWA,GAAX,CAAcK,OAjBF,4CAA1B,sDAoBAM,qBAAU,WACR3B,OAAO4B,UAAY,SAAUC,GACZ,cAAXA,EAAEC,OACJxB,GAAe,GACfP,EAAegC,OACfhC,EAAeiC,UAGnBhC,OAAOiC,QAAU,SAAUJ,GACV,cAAXA,EAAEC,OACJxB,GAAe,GACfP,EAAegC,WAGlB,IACI,sBAAKG,UAAU,YAAf,UACL,4EACA,qBAAKA,UAAU,UAAf,SACG/B,EAASgC,KAAI,SAAAC,GAAI,OAAI,8BACpB,sBAAMF,UAAU,SAAhB,SAA2BE,WAG/B,iCACE,qBAAKC,IAAKhC,EAAciC,EAAWC,EAAWC,IAAI,WC/CzCC,MANf,WACE,OACE,cAAC,EAAD,KCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.852f49ee.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/before.4ce516a4.svg\";","export default __webpack_public_path__ + \"static/media/after.fa0a9289.svg\";","\nimport React, { useState, useEffect } from 'react';\n\nimport beforeImg from '../assets/before.svg';\nimport afterImg from '../assets/after.svg';\n\nimport './index.less';\n\nexport default () => {\n  const newRecognition = new window.webkitSpeechRecognition();\n  const [talkList, setTalkList] = useState([]);\n  const [isListening, setIsListening] = useState(false);\n  newRecognition.continuous = true;\n\n  newRecognition.onresult = async function (event) {\n    console.log(event.results[0][0].transcript, 'onresult');\n    const result = event.results[0][0].transcript;\n    setTalkList((t) => [...t, result]);\n    const res = await fetch(\n      `/api?key=free&appid=0&msg=${result}`,\n      {\n        headers: {\n          'Access-Control-Allow-Origin': 'no-cors',\n          'Access-Control-Allow-Origin': 'http://localhost',\n          Origin: 'api.qingyunke.com'\n        }\n      }\n    );\n    const reply = (await res.json()).content;\n    const utterThis = new window.SpeechSynthesisUtterance(reply);\n    window.speechSynthesis.speak(utterThis);\n    setTalkList((t) => [...t, reply]);\n  };\n\n  useEffect(() => {\n    window.onkeydown = function (e) {\n      if (e.code === 'ShiftLeft') {\n        setIsListening(true);\n        newRecognition.stop();\n        newRecognition.start();\n      }\n    };\n    window.onkeyup = function (e) {\n      if (e.code === 'ShiftLeft') {\n        setIsListening(false);\n        newRecognition.stop();\n      }\n    };\n  }, []);\n  return <div className=\"container\">\n    <header>按 左-shift 键对话</header>\n    <div className=\"content\">\n      {talkList.map(item => <div>\n        <span className=\"dialog\">{ item }</span>\n      </div>)}\n    </div>\n    <footer>\n      <img src={isListening ? afterImg : beforeImg} alt=\"\" />\n    </footer>\n  </div>;\n}","import React from 'react';\nimport Home from './pages/index';\n// import './App.less';\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}